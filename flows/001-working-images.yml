title: "Introduction to Python and Numpy"

# The "|" character introduces a 'block literal', which means all text indented below
# it is taken literally. The description property holds text marked up with 'Markdown'.
# See https://documen.tician.de/relate/content.html#relate-markup for more.
#
# So the '#' character below introduces a first-level headline (not a comment).
description: |

    # Working with images

    ### Instructions
    - After completing an exercise, click on "**Submit answer for feedback**" to have your code corrected. Clicking
      "Save answer" will just save the answer in a draft state.
    - After completing the session, remember to click on **the green tick box** in the upper-right to submit the
      overall test. Otherwise, the full test will be considered in a draft state.

rules:
    start:
    -
        if_has_role: [student, ta, instructor]
        may_start_new_session: True
        may_list_existing_sessions: True

    -
        may_start_new_session: False
        may_list_existing_sessions: True

    access:
    -
        permissions: [view, submit_answer, end_session, see_correctness, change_answer, send_email_about_flow_page]

    grade_aggregation_strategy: use_latest

    grade_identifier: intro_numpy
    grading:
    -
        credit_percent: 100

groups:
-
    id: quiz_start
    shuffle: False
    pages:

    # Pages can be given in-line (like this one) or brought in by including
    # them from other files, as below.
    -
            type: PythonCodeQuestionWithHumanTextFeedback
            rubric: ""
            human_feedback_percentage: 50
            id: linear_stretch
            access_rules:
                add_permissions:
                   - change_answer
            value: 1
            timeout: 30
            show_setup_code: True
            prompt: |
                # Linear stretch
                Your code will take as input a color image `im`
                (a `np.ndarray` with dtype `np.uint8` and rank 3) and two scalars `a` and `b`. It
                must apply a pixel-wise linear transformation (every pixel
                $p$ is transformed to $a\cdot p + b$). The code should produce a
                new image `out` with the same shape and dtype.

                `a` and `b` can be either ints or floats.
                Be careful to: compute the exact result, round to nearest integer and then clip between 0 and 255.
            setup_code: |
                import random
                import numpy as np
                from skimage import data
                from skimage.transform import resize

                im = data.coffee()
                im = resize(im, (im.shape[0] // 8, im.shape[1] // 8), mode='reflect', preserve_range=True, anti_aliasing=True).astype(np.uint8)
                im = np.swapaxes(np.swapaxes(im, 0, 2), 1, 2)

                a = random.uniform(0,2)
                b = random.uniform(-50,50)
            names_for_user: [im, a, b]

            names_from_user: [out]

            test_code: |
                import cv2
                import base64
                import matplotlib.pyplot as plt
                import io
                import random
                import numpy as np

                # Display inputs
                msg = "<p>Using inputs:</p>"

                msg += "<p><pre>im = </pre></p>"
                im_to_show = np.swapaxes(np.swapaxes(im, 1, 2), 0, 2)
                plt.imshow(im_to_show, cmap='gray', vmin=0, vmax=255)
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                im_base64 = base64.b64encode(buf.getvalue()).decode('ascii')
                msg += '<img src="data:image/png;base64,%s" />' % im_base64

                msg += "<p><pre>a = " + str(a) + "</pre></p>"
                msg += "<p><pre>b = " + str(b) + "</pre></p>"
                feedback.add_feedback(msg)

                # Check correctness
                ref = np.clip(np.rint(im.astype(np.float32) * a + b), 0, 255).astype(np.uint8)
                feedback.check_numpy_array_features("out", ref, out)

                msg = "<p>Your code provided the following output:</p>"
                msg += "<p><pre>out = </pre></p>"
                im_to_show = np.swapaxes(np.swapaxes(out, 1, 2), 0, 2)
                plt.imshow(im_to_show, cmap='gray', vmin=0, vmax=255)
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                im_base64 = base64.b64encode(buf.getvalue()).decode('ascii')
                msg += '<img src="data:image/png;base64,%s" />' % im_base64
                msg += "<p>The reference output was:</p>"
                msg += "<p><pre>out = </pre></p>"
                im_to_show = np.swapaxes(np.swapaxes(ref, 1, 2), 0, 2)
                plt.imshow(im_to_show, cmap='gray', vmin=0, vmax=255)
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                im_base64 = base64.b64encode(buf.getvalue()).decode('ascii')
                msg += '<img src="data:image/png;base64,%s" />' % im_base64
                feedback.add_feedback(msg)

                # Check accuracy
                good = np.allclose(ref, out)
                if not good:
                  feedback.add_feedback("'%s' is inaccurate" % "out")
                  np.set_printoptions(threshold=np.inf)
                  msg = "<p>Your code returned:</p><pre>" + str(out) + "</pre>"
                  msg += "<p>While the reference output was:</p><pre>" + str(ref) + "</pre>"
                  feedback.add_feedback(msg)
                  feedback.set_points(0)
                  raise GradingComplete()

                feedback.set_points(1)
                raise GradingComplete


    -
            type: PythonCodeQuestionWithHumanTextFeedback
            rubric: ""
            human_feedback_percentage: 100
            id: stitching
            access_rules:
                add_permissions:
                   - change_answer
            value: 1
            timeout: 30
            show_setup_code: True
            data_files:
              - "question-data/gallery_0.jpg"
              - "question-data/gallery_1.jpg"
            prompt: |
                # Image Stitching
                Your code will take as input two color images `im_a` and `im_b`
                (`np.ndarray` with dtype `np.uint8` and shape `(3, H, W)`),
                depicting the same scene from two different perspectives.

                You then need to:

                - Manually identify (at least) four corresponding pairs of points
                - Estimate the homography between the first and the second image using the detected
                  point pairs.
                - Warp the second image using the estimated transformation matrix.
                - "Merge" the two images in a single one by sticking one on top of the other.

                The code is expected to show the final result using pyplot
                (e.g. calling the `imshow` function). When doing this, pay
                attention to the axis order (their format is `(H, W, 3)`).

                If you employ OpenCV functions, recall that the OpenCV format is also `(H, W, 3)`.

                #### Resources
                - `im_a` can be downloaded [here](/courses/media/vcs2020/question-data/gallery_0.jpg)
                - `im_b` can be downloaded [here](/courses/media/vcs2020/question-data/gallery_1.jpg)
                - A sample result can be downloaded [here](/courses/media/vcs2020/question-data/stiching_result.png)

            setup_code: |
                from io import BytesIO
                import numpy as np
                import cv2
                from skimage import data

                bio = BytesIO(data_files["question-data/gallery_0.jpg"])
                bytes = np.asarray(bytearray(bio.read()), dtype=np.uint8)
                im_a = cv2.imdecode(bytes, cv2.IMREAD_COLOR)
                im_a = np.swapaxes(np.swapaxes(im_a, 0, 2), 1, 2)
                im_a = im_a[::-1, :, :]  # from BGR to RGB

                bio = BytesIO(data_files["question-data/gallery_1.jpg"])
                bytes = np.asarray(bytearray(bio.read()), dtype=np.uint8)
                im_b = cv2.imdecode(bytes, cv2.IMREAD_COLOR)
                im_b = np.swapaxes(np.swapaxes(im_b, 0, 2), 1, 2)
                im_b = im_b[::-1, :, :]  # from BGR to RGB

            names_for_user: [im_a, im_b]

            names_from_user: []

            test_code: |
                import cv2
                import base64
                import matplotlib.pyplot as plt
                import io
                import random
                import numpy as np

                # Display inputs
                msg = "<p>Using inputs:</p>"

                msg += "<p><pre>im_a = </pre></p>"
                im_to_show = np.swapaxes(np.swapaxes(im_a, 1, 2), 0, 2)
                plt.imshow(im_to_show, cmap='gray', vmin=0, vmax=255)
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                im_base64 = base64.b64encode(buf.getvalue()).decode('ascii')
                msg += '<img src="data:image/png;base64,%s" />' % im_base64

                msg += "<p><pre>im_b = </pre></p>"
                im_to_show = np.swapaxes(np.swapaxes(im_b, 1, 2), 0, 2)
                plt.imshow(im_to_show, cmap='gray', vmin=0, vmax=255)
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                im_base64 = base64.b64encode(buf.getvalue()).decode('ascii')
                msg += '<img src="data:image/png;base64,%s" />' % im_base64
                feedback.add_feedback(msg)

                feedback.add_feedback("This exercise is not evaluated automatically. It will be evaluated by an instructor.")
                feedback.set_points(1)
                raise GradingComplete

completion_text: |

    # See you in class!

    Thanks for completing the quiz.